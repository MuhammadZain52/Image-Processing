typedef struct CheckHead {
	void** data;
	int size;
	int count;
} CheckHead;
void ConnectedNeighbors(struct pixel s, double T, unsigned char **img, int width, int height, int *M, struct pixel c[4]) {
	*M = 0;

	if (s.row - 1 >= 0 && abs((int)img[s.row - 1][s.col] - (int)img[s.row][s.col]) <= T)
	{
		c[0].col = s.col;
		c[0].row = s.row - 1;
		*M = *M + 1;
	}
	else
	{
		c[0].col = -1;
		c[0].row = -1;
	}

	if (s.col - 1 >= 0 && abs((int)img[s.row][s.col - 1] - (int)img[s.row][s.col]) <= T)
	{
		c[1].col = s.col - 1;
		c[1].row = s.row;
		*M++;
	}
	else
	{
		c[1].col = -1;
		c[1].row = -1;
	}

	if (s.row + 1 < height && abs((int)img[s.row + 1][s.col] - (int)img[s.row][s.col]) <= T)
	{
		c[2].col = s.col;
		c[2].row = s.row + 1;
		*M++;
	}
	else
	{
		c[2].col = -1;
		c[2].row = -1;
	}



	if (s.col + 1 < width && abs((int)img[s.row][s.col + 1] - (int)img[s.row][s.col]) <= T)
	{
		c[3].col = s.col + 1;
		c[3].row = s.row;
		*M++;
	}
	else
	{
		c[3].col = -1;
		c[3].row = -1;
	}
}
void ConnectedSet(struct pixel s, double T, unsigned char **img, int width, int height, int ClassLabel, int seg[][384], int *NumConPixels)
{

	int neighbors = 0;
	struct pixel pixels[4];

	CheckHead v;
	CheckHead_init(&v);
	CheckHead_add(&v, &s);
	do
	{
		struct pixel *point = CheckHead_get(&v, v.count - 1);

		int r = point->row;
		int c = point->col;
		seg[r][c] = ClassLabel;

		*NumConPixels += 1;
		struct pixel *vis = (struct pixel *) malloc(sizeof(struct pixel));
		vis->col = c;
		vis->row = r;

		printf("found:%d \n", *NumConPixels);
		printf("count:%d \n", v.count);
		printf("row:%d ", vis->row);
		printf("col:%d \n", vis->col);


		ConnectedNeighbors(*point, T, img, width, height, &neighbors, pixels);
		CheckHead_delete(&v, v.count - 1);

		for (int j = 0; j < 4; j++) {

			if (seg[pixels[j].row][pixels[j].col] == 0 && pixels[j].row != -1) {

				struct pixel *point3 = (struct pixel *) malloc(sizeof(struct pixel));
				point3->col = pixels[j].col;
				point3->row = pixels[j].row;
				CheckHead_add(&v, point3);
				seg[point3->row][point3->col] = ClassLabel;
			}
		}
	} while (v.count >= 1);

	CheckHead_free(&v);
}